<style>
    {% if section.settings.width == false %}
    #peakconversion__{{ section.id }}{
       margin-top: {{section.settings.margin_top}}px;
          margin-bottom: {{section.settings.margin_bottom}}px;
          margin-left: 4rem;
          margin-right: 4rem;
      }
      {% endif %}
    {% if section.settings.width == false %}
    #peakconversion__{{ section.id }} .section-{{ section.id }}{
      padding: 0;
      border-radius: 30px;
      margin-top: {{section.settings.margin_top}}px;
      margin-bottom: {{section.settings.margin_bottom}}px;
      overflow: hidden;
      width: 100%;
    }
  {% endif %}
  
  #peakconversion__{{ section.id }} .section-{{ section.id }}{
      overflow: hidden;
    }
    @media only screen and (max-width: 768px){
        #peakconversion__{{ section.id }}{
          margin-top: {{section.settings.margin_top}}px;
          margin-bottom: {{section.settings.margin_bottom}}px;
          margin-left: 0rem;
          margin-right: 0rem;
    }
    #peakconversion__{{ section.id }} .section-{{ section.id }}{
      padding: 0;
          border-radius: 0px;
      overflow: hidden;
      width: 100%;
    }
    }
  #peakconversion__{{ section.id }} img {
      height: 100%;
    }

   #peakconversion__{{ section.id }} .section-{{ section.id }}-padding {
      padding-top: 0px;
      padding-bottom: 0px;
      position: relative;
    }

   #peakconversion__{{ section.id }} .ab-banner-{{ section.id }} {
      height: 500px;
      position: relative;
    }

   #peakconversion__{{ section.id }} .ab-banner-slide-{{ section.id }} {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
    }

   #peakconversion__{{ section.id }} .ab-banner-slide-{{ section.id }}--active {
      opacity: 1;
      z-index: 1;
    }

   #peakconversion__{{ section.id }} .ab-banner-image-{{ section.id }} {
      width: 100%;
      height: 100%;
      object-fit: cover;
      position: absolute;
      top: 0;
      left: 0;
    }

   #peakconversion__{{ section.id }} .ab-banner-image-{{ section.id }}--desktop {
      display: none;
    }

   #peakconversion__{{ section.id }} .ab-banner-content-{{ section.id }} {
      position: absolute;
      top: 0;
      left: 50%;
      transform: translateX(-50%);
      width: 100%;
      max-width: 120rem;
      margin: 0 auto;
      height: 100%;
      z-index: 2;
      display: flex;
      flex-direction: column;
      justify-content: {{ section.settings.h_align }};
      align-items: {{ section.settings.v_align }};
      padding: 1.5rem;
      line-height: 1;
    }

   #peakconversion__{{ section.id }} .ab-banner-title-{{ section.id }} {
      text-align: center;
    }

   #peakconversion__{{ section.id }} .ab-banner-title-{{ section.id }} * {
      margin: 0;
      font-size: 32px;
      color: #ffffff;
      line-height: 130%;
      text-transform: unset;
    }

   #peakconversion__{{ section.id }} .ab-banner-subtitle-{{ section.id }} {
      margin-top: 15px;
      text-align: center;
    }

   #peakconversion__{{ section.id }} .ab-banner-subtitle-{{ section.id }} * {
      margin: 0;
      font-size: {{section.settings.subheading_size }}px;
      font-weight: {{ section.settings.subheading_weight }};
      color: #ffffff;
      line-height: 130%;
      text-transform: unset;
    }

   #peakconversion__{{ section.id }} .ab-banner-button-wrapper-{{ section.id }} {
      margin-top: 15px;
      display: flex;
      flex-direction: row;
      gap: 15px;
      width: 100%;
    }

   #peakconversion__{{ section.id }} .ab-banner-button-{{ section.id }} {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      max-width: fit-content;
      font-size: 16px;
      color: {{section.settings.btn_label_color}};
      line-height: 120%;
      text-align: center;
      text-transform: unset;
      text-decoration: none;
      padding: 14px 32px;
      border-radius: 0px;
      background-color: {{section.settings.btn_color}};
     {% if section.settings.border %}
      border: 1px solid {{section.settings.btn_label_color}};
       {% endif %}
      transition: all 0.25s ease 0s;
      position: relative;
      font-weight: 700;
      z-index: 2;
    }

   #peakconversion__{{ section.id }} .ab-banner-button-{{ section.id }}:hover {
     background-color: {{ section.settings.btn_color_hover }};
      border: 0px solid {{ section.settings.btn_color_hover }};
      color: {{section.settings.btn_label_color_hover}};
      transition: all 0.25s ease .3s;
    }

   #peakconversion__{{ section.id }} .ab-banner-button-second-{{ section.id }} {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      max-width: fit-content;
      font-size: 16px;
      color: {{section.settings.btn_label_color}};
      line-height: 120%;
      text-align: center;
      text-transform: unset;
      text-decoration: none;
      padding: 14px 32px;
      border-radius: 0px;
      background-color: {{section.settings.btn_color}};
     {% if section.settings.border %}
      border: 1px solid {{section.settings.btn_label_color}};
       {% endif %}
      transition: all 0.25s ease 0s;
      position: relative;
      font-weight: 700;
      z-index: 2;
    }

   #peakconversion__{{ section.id }} .ab-banner-button-second-{{ section.id }}:hover {
      background-color: {{ section.settings.btn_color_hover }};
      border: 0px solid {{ section.settings.btn_color_hover }};
      color: {{section.settings.btn_label_color_hover}};
      transition: all 0.25s ease .3s;
    }

    {% if section.settings.overlay == true %}
   #peakconversion__{{ section.id }} .ab-banner-overlay-{{ section.id }} {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba( 0, 0, 0, {{section.settings.overlay_opacity}});
      
      pointer-events: none;
      z-index: 1;
    }
    {% endif %}

   #peakconversion__{{ section.id }} .ab-banner-video-wrapper-{{ section.id }} {
      position: absolute;
      z-index: 1;
      top: 0;
      left: 0;
      /*object-fit: cover;*/
    }

    #peakconversion__{{ section.id }}.ab-banner-video-wrapper-{{ section.id }},
   #peakconversion__{{ section.id }} .ab-banner-video-{{ section.id }} {
      height: 100%;
      width: 100%;
      object-fit: cover;
    }

    

    #peakconversion__{{ section.id }} .ab-banner-image-wrapper-playing-video-{{ section.id }} .ab-banner-video-wrapper-{{ section.id }} {
      display: block;
          width: 100%;
      height: -webkit-fill-available;
    }

   #peakconversion__{{ section.id }} .ab-banner-image-wrapper-playing-video-{{ section.id }} .ab-banner-image-wrapper-{{ section.id }} {
      display: none;
    }


    @media screen and (min-width: 750px) {

      /* #peakconversion__{{ section.id }} .section-{{ section.id }} {
                margin-top: 100px;
          margin-bottom: 100px;
          margin-left: 4rem;
          margin-right: 4rem;
          border-radius: 30px;
      } */

      #peakconversion__{{ section.id }} .section-{{ section.id }}-padding {
        padding-top: 0px;
        padding-bottom: 0px;
      }

      #peakconversion__{{ section.id }} .ab-banner-{{ section.id }} {
        height: 600px;
      }

      #peakconversion__{{ section.id }} .ab-banner-image-{{ section.id }}--desktop {
        display: block;
      }

      #peakconversion__{{ section.id }} .ab-banner-image-{{ section.id }}--mobile {
        display: none;
      }

      #peakconversion__{{ section.id }} .ab-banner-content-{{ section.id }} {
        /* padding-top: 0px;
        padding-bottom: 0px;;
        padding-left: 3rem;
        padding-right: 3rem; */
      }

      #peakconversion__{{ section.id }} .ab-banner-button-wrapper-{{ section.id }} {
        margin-top: 20px;
        gap: 20px;
      }

      #peakconversion__{{ section.id }} .ab-banner-title-{{ section.id }} * {
        margin: 0;
        font-size: {{section.settings.heading_size}}px;
      }

      #peakconversion__{{ section.id }} .ab-banner-subtitle-{{ section.id }} {
        margin-top: 20px;
      }

      #peakconversion__{{ section.id }} .ab-banner-subtitle-{{ section.id }} * {
        margin: 0;
        font-size: {{ section.settings.subheading_size }}px;
        font-weight: {{ section.settings.subheading_weight }};
      }

      #peakconversion__{{ section.id }} .ab-banner-button-{{ section.id }} {
        padding: 14px 32px;
        font-size: 16px;
      }

      #peakconversion__{{ section.id }} .ab-banner-button-second-{{ section.id }} {
        padding: 14px 32px;
        font-size: 16px;
      }
    }
</style>

<style>
  #peakconversion__{{ section.id }} .ab-banner-button-wrapper-{{ section.id }} {
    justify-content: {{ section.settings.v_align }} ;
  }
  @media only screen and (max-width: 768px){
    #peakconversion__{{ section.id }} .ab-banner-button-wrapper-{{ section.id }} {
    justify-content: center ;
  }
  }
</style>

<section id="peakconversion__{{ section.id }}" style="margin-bottom: {{section.settings.margin_bottom}};  ">
  <div class="section-{{ section.id }}">
    <div class="section-{{ section.id }}-padding">
      <div class="ab-banner-{{ section.id }}">
        <div
          class="ab-banner-slide-{{ section.id }} as-banner-slide-has-video-{{ section.id }} ab-banner-slide-{{ section.id }}--active ab-banner-image-wrapper-playing-video-{{ section.id }}"
          data-index="0"
          data-autoplay="true"
        >
          <div class="ab-banner-video-wrapper-{{ section.id }}">
            <div class="ab-banner-video-{{ section.id }}">
              {% if section.settings.banner_video != blank %}
            {{ section.settings.banner_video | video_tag: autoplay: true, loop: true, muted: true, controls: false }}
            {% else %}
                {{ 'lifestyle-1' |  placeholder_svg_tag }}
              {% endif %}
            </div>
            
          </div>

          <span class="ab-banner-overlay-{{ section.id }}"></span>

          <div class="ab-banner-content-{{ section.id }}">
            <div class="ab-banner-title-{{ section.id }}">
              <h2 style="color: {{ section.settings.text_color }};">{{ section.settings.heading }}</h2>
            </div>

            {% if section.settings.subheading != blank %}
              <div class="ab-banner-subtitle-{{ section.id }}">
                <p style="color: {{ section.settings.text_color }};">{{ section.settings.subheading }}</p>
              </div>
            {% endif %}

            <div class="ab-banner-button-wrapper-{{ section.id }}">
              {% if section.settings.button_label != blank %}
                <a href="{{ section.settings.button_url }}" class="ab-banner-button-{{ section.id }}">
                  {{ section.settings.button_label }}
                </a>
              {% endif %}

              {% if section.settings.button_label2 != blank %}
                <a href="{{ section.settings.button_url2 }}" class="ab-banner-button-second-{{ section.id }}">
                  {{ section.settings.button_label2 }}
                </a>
              {% endif %}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
{% schema %}
{
  "name": "PC Hero Video Banner",
  "settings": [
    {
      "type": "header",
      "content": "This section is a property of PeakConversion",
      "info": "Do not sell or reproduce. contact us at franklinjounda@gmail.com for more info - please save to see all changes"
    },
    {
      "type": "header",
      "content": "Media"
    },
    {
      "type": "video",
      "id": "banner_video",
      "label": "Video",
    },
    {
      "type": "header",
      "content": "Text & Link"
    },
    {
      "type": "text",
      "id": "heading",
      "label": "Heading",
      "default": "Banner heading"
    },
    {
      "type": "range",
      "id": "heading_size",
      "label": "Heading size",
      "default": 42,
      "min": 10,
      "max": 100,
      "step": 1,
      "unit": "px"
    },
    {
      
        "type": "select",
        "id": "heading_weight",
        "label": "Heading Weight",
        "options": [
          {
            "value": "normal",
            "label": "Normal"
          },
          {
            "value": "bold",
            "label": "Bold"
          },
          {
            "value": "bolder",
            "label": "Bolder"
          },
          {
            "value": "lighter",
            "label": "Lighter"
          }
        ],
        "default": "normal"
      
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Subheading",
      "default": "Lorem ipsum dolor sit amet consectetur adipiscing elit"
    },
    {
      "type": "range",
      "id": "subheading_size",
      "label": "Heading size",
      "default": 24,
      "min": 10,
      "max": 100,
      "step": 1,
      "unit": "px"
    },
    {
      
        "type": "select",
        "id": "subheading_weight",
        "label": "SubHeading Weight",
        "options": [
          {
            "value": "normal",
            "label": "Normal"
          },
          {
            "value": "bold",
            "label": "Bold"
          },
          {
            "value": "bolder",
            "label": "Bolder"
          },
          {
            "value": "lighter",
            "label": "Lighter"
          }
        ],
        "default": "normal"
      
    },
    {
      "type": "text",
      "id": "button_label",
      "label": "Button Label 1",
      "default": "Shop Now"
    },
    {
      "type": "text",
      "id": "button_url",
      "label": "Button Link 1",
    },
    {
      "type": "text",
      "id": "button_label2",
      "label": "Button Label 2",
      "default": "Shop Now"
    },
    {
      "type": "text",
      "id": "button_url2",
      "label": "Button Link 2",
    },
    {
      "type": "checkbox",
      "id": "border",
      "label": "Enable border",
      "default": false
    },
    {
      "type": "header",
      "content": "Colors"
    },
    {
      "type": "color",
      "id": "text_color",
      "label": "Text color",
      "default": "#fff"
    },
    {
      "type": "color",
      "id": "btn_label_color",
      "label": "Button label color",
      "default": "#000"
    },
    {
      "type": "color",
      "id": "btn_label_color_hover",
      "label": "Button label color hover",
      "default": "#fff"
    },
    {
      "type": "color",
      "id": "btn_color",
      "label": "Button color",
      "default": "#fff"
    },
    {
      "type": "color",
      "id": "btn_color_hover",
      "label": "Button color hover",
      "default": "#000"
    },
    {
      "type": "header",
      "content": "Layout"
    },
    {
      "type": "checkbox",
      "id": "overlay",
      "label": "Enable overlay",
      "default": true
    },
    {
      "type": "range",
      "id": "overlay_opacity",
      "label": "Overlay opacity",
      "min": 0,
      "max": 1,
      "step": 0.1,
      
      "default": 0.4
    },
    {
      "type": "checkbox",
      "id": "width",
      "label": "Enable full width",
      "default": true
    },
    {
      "type": "select",
      "id": "v_align",
      "label": "Vertical alignment",
      "options": [
        {
          "value": "start",
          "label": "Top"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "end",
          "label": "End"
        }
      ],
      
      "default": "center"
    },
    {
      "type": "select",
      "id": "h_align",
      "label": "Horizontal alignment",
      "options": [
        {
          "value": "top",
          "label": "Top"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "end",
          "label": "Bottom"
        }
      ],
      
      "default": "center"
    },
    {
      "type": "range",
      "id": "margin_top",
      "label": "Margin top",
      "min": 1,
      "max": 100,
      "default": 1,
      "step": 1,
      "unit": "px"
    },
    {
      "type": "range",
      "id": "margin_bottom",
      "label": "Margin bottom",
      "min": 1,
      "default": 1,
      "max": 100,
      "step": 1,
      "unit": "px"
    }
  ],
  "presets": [
    {
      "name": "PC Hero Video Banner"
    }
  ]
}
{% endschema %}
<script defer="" src="https://www.youtube.com/iframe_api"></script>

<script>
  (function () {
    let slideSwitchTimeoutID;
    let videoPlayers = {};
    let hasOnlyOneSlide = false;
    let videos = document.querySelectorAll('.ab-banner-{{ section.id }} video');
    if(videos) {
      videos.forEach(el => {
        setTimeout(()=> {
          el.removeAttribute('loop');
        }, 1000);
      })
    }

    function getNextIndex() {
      const images = document.querySelectorAll(
        '.ab-banner-slide-{{ section.id }}'
      );
      const activeImage = document.querySelector(
        '.ab-banner-slide-{{ section.id }}--active'
      );
      const activeIndex = Array.prototype.indexOf.call(images, activeImage);
      const nextIndex = (activeIndex + 1) % images.length;
      return nextIndex;
    }

    function autoSlideSwitch(index) {
      //console.log('autoSlideSwitch', index);
      const images = document.querySelectorAll(
        '.ab-banner-slide-{{ section.id }}'
      );
      const activeSlide = document.querySelector(
        '.ab-banner-slide-{{ section.id }}--active'
      );


      const activeIndex = Array.prototype.indexOf.call(images, activeSlide);
      const newActiveSlide = images[index];

      //if (activeIndex === index) return;

      activeSlide.classList.remove('ab-banner-slide-{{ section.id }}--active');
      newActiveSlide.classList.add('ab-banner-slide-{{ section.id }}--active');

      // TODO: Check if we have any videos in the new active slide
      // 1. if we have <video>, play it:
      const oldVideoEl = activeSlide.querySelector('video');
      if (oldVideoEl) {
        oldVideoEl.pause();
      }

      const newVideoEl = newActiveSlide.querySelector('video');
      if (newVideoEl) {
        if (getIfAutoplay(newActiveSlide)) {
          newVideoEl.play();
        }
        // if the video is not playing, show the play button
        if (newVideoEl.paused) {
          handleWhenVideoPaused(newActiveSlide);
        } else {
          handleWhenVideoPlay(newActiveSlide);
        }
        newVideoEl.addEventListener('ended', () => {
          if (hasOnlyOneSlide) {
            newVideoEl.play();
          } else {
            handleWhenVideoPaused(activeSlide);
            autoSlideSwitch(getNextIndex());
          }
        });
      }

      // 2. if we have <template data-youtube-template>, load and unload youtube video
      const oldYoutubeEl = activeSlide.querySelector(
        '.ab-banner-video-{{ section.id }}'
      );
      //if (oldYoutubeEl) unloadYoutubeVideo(activeSlide); // no need to unload

      const newYoutubeEl = newActiveSlide.querySelector(
        '[data-youtube-template]'
      );
      if (newYoutubeEl) loadYoutubeVideo(newActiveSlide);

      if (newVideoEl || newYoutubeEl) {
        // have any video, wait for them to finish before we call the next slide
        //console.log('waiting for video to finish');
        if (!getIfAutoplay(newActiveSlide)) {
          const intervalTime = document.querySelector(
            '.ab-banner-{{ section.id }}'
          ).dataset.interval;
          slideSwitchTimeoutID = setTimeout(() => {
            autoSlideSwitch(getNextIndex());
          }, intervalTime);
        }
      } else {
        // no video, wait for interval time to call next slide
        //console.log('no video, wait for interval time');
        const intervalTime = document.querySelector(
          '.ab-banner-{{ section.id }}'
        ).dataset.interval;
        slideSwitchTimeoutID = setTimeout(() => {
          autoSlideSwitch(getNextIndex());
        }, intervalTime);
      }
    }

    const videoPlayingClass =
      'ab-banner-image-wrapper-playing-video-{{ section.id }}';
    function handleWhenVideoPaused(slideEl) {
      slideEl.classList.remove(videoPlayingClass);
    }
    function handleWhenVideoPlay(slideEl) {
      slideEl.classList.add(videoPlayingClass);
    }

    function getIfAutoplay(slideEl) {
      // check if slideEl has data-autoplay
      const autoplay = slideEl.dataset.autoplay;
      if (autoplay) return true;
      else return false;
    }

    function loadYoutubeVideo(slideEl) {
      const index = slideEl.dataset.index;
      // Check if we have already loaded the video in the videoPlayers:
      if (videoPlayers[index]) {
        if (getIfAutoplay(slideEl)) videoPlayers[index].playVideo();
        return;
      } else if (typeof YT !== 'undefined' && YT.loaded) {
        // print all the if statments:
        const template = slideEl.querySelector('[data-youtube-template]');
        let childEl = template.content.firstElementChild.cloneNode(true);

        const videoWrapper = slideEl.querySelector(
          '.ab-banner-video-wrapper-{{ section.id }}'
        );
        childEl = videoWrapper.appendChild(childEl);

        const videoId = childEl.dataset.videoId;
        const player = new YT.Player(childEl, {
          height: '100%',
          width: '100%',
          videoId: videoId,
          playerVars: {
            mute: 1,
            playinline: 1,
            //loop: 1,
            //playlist: [videoId],
            //autoplay: 1,
            controls: 0,
          },
          // on finished, play next video:
          events: {
            onReady: () => {
              if (getIfAutoplay(slideEl)) {
                player.playVideo();
              }
              // check if the video is playing to see if ios is blocking autoplay:
            },
            onStateChange: (event) => {
              if (event.data === YT.PlayerState.PLAYING) {
                handleWhenVideoPlay(slideEl);
              } else if (event.data === YT.PlayerState.PAUSED) {
                handleWhenVideoPaused(slideEl);
              } else if (event.data === YT.PlayerState.ENDED) {
                if (hasOnlyOneSlide) {
                  player.playVideo();
                } else {
                  autoSlideSwitch(getNextIndex());
                  handleWhenVideoPaused(slideEl);
                }
              }
            },
          },
        });
        videoPlayers[index] = player;
      } else {
        setTimeout(() => loadYoutubeVideo(slideEl), 300);
      }
    }
    function unloadYoutubeVideo(slideEl) {
      const iframe = slideEl.querySelector('iframe');
      if (iframe) {
        iframe.remove();
      }
    }

    function setupPlayButton(slideEl) {
      const playButton = slideEl.querySelector(
        '.ab-banner-play-button-{{ section.id }}'
      );
      if (!playButton) return;
      playButton.addEventListener('click', () => {
        clearTimeout(slideSwitchTimeoutID);
        handleWhenVideoPlay(slideEl);
        try {
          const videoWrapper = slideEl.querySelector(
            '.ab-banner-video-wrapper-{{ section.id }}'
          );
          videoWrapper.classList.add(
            'ab-banner-video-wrapper-{{ section.id }}--playing'
          );
          const videoEl = slideEl.querySelector('video');
          if (videoEl) {
            videoEl.play();
          } else {
            const youtubeEl = slideEl.querySelector('iframe');
            if (youtubeEl) {
              const index = slideEl.dataset.index;
              videoPlayers[index].playVideo();
            }
          }
        } catch (e) {
          console.log(e);
        }
      });
    }

    function Init() {
      const slides = document.querySelectorAll(
        '.ab-banner-slide-{{ section.id }}'
      );
      const size = slides.length;
      if (size < 1) return;
      hasOnlyOneSlide = size === 1 ? true : false;

      // setup play button:
      slides.forEach((slideEl) => {
        setupPlayButton(slideEl);
      });

      autoSlideSwitch(0);

      if (window.Shopify && window.Shopify.designMode)
        document.addEventListener('shopify:section:unload', function (event) {
          if (event.detail.sectionId !== '{{ section.id }}') return;
          if (slideSwitchTimeoutID) clearTimeout(slideSwitchTimeoutID);
          videoPlayers = {};
        });
    }

    Init();
    if (window.Shopify && window.Shopify.designMode) {
      document.addEventListener('shopify:section:load', function (event) {
        if (event.detail.sectionId !== '{{ section.id }}') return;
        Init();
      });
    }
  })();
</script>
